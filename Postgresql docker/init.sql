-- Jokes

CREATE TYPE role AS ENUM ('content manager', 'tutor');

CREATE TABLE IF NOT EXISTS users
(
    id BIGINT PRIMARY KEY,
    roles role[]
);

CREATE TABLE IF NOT EXISTS approved_jokes
(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    joke TEXT NOT NULL,
    user_id BIGINT,
    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS suggested_jokes
(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    joke TEXT NOT NULL,
    user_id BIGINT,
    FOREIGN KEY (user_id) REFERENCES users (id)
);

-- Links

CREATE TABLE IF NOT EXISTS links
(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    link TEXT NOT NULL,
    description TEXT,
    tags INT[],
    user_id BIGINT
    /* FOREIGN KEY (tags) REFERENCES tags (id)
    foreign key - нельзя ассоциировать элементы массива с полем без потери производительности
    так что оставим без связи*/
);

-- Tutors

CREATE TABLE IF NOT EXISTS approved_tutors
(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contacts TEXT NOT NULL,
    subjects TEXT[] NOT NULL,
    tutor_id BIGINT UNIQUE,
    FOREIGN KEY (tutor_id) REFERENCES users (id),
    user_id BIGINT,
    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS suggested_tutors
(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contacts TEXT NOT NULL,
    subjects TEXT[] NOT NULL,
    tutor_id BIGINT UNIQUE,
    FOREIGN KEY (tutor_id) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS lectors
(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    faculty TEXT,
    institute TEXT,
    UNIQUE (name, email)
);

CREATE TABLE IF NOT EXISTS tags
(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tag TEXT NOT NULL UNIQUE,
    mentions BIGINT
);
